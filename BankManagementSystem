Bank Management System
==========================
AccountListWindow
---------------------
AccountListWindow.xaml

<Window x:Class="BankManagementSystem.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Closed="Window_Closed">
    <Grid MaxWidth="1000" Margin="10 10 10 10">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="Account Manager"
                   FontSize="24"
                   FontWeight="bold"
                   TextAlignment="center"
                   Background="Olive"/>
        <Button Grid.Row="1" Content="Add Account" Width="200" Height="30" Margin="0 10 0 0" HorizontalAlignment="left"
                Background="DimGray" Foreground="Beige" FontWeight="bold"
                Click="Button_Click"/>
        <DataGrid x:Name="grdAccounts" Grid.Row="2" Margin="0 10 0 0"
                   SelectedItem="{Binding SelectedAccount, Mode=TwoWay}" IsReadOnly="True" AreRowDetailsFrozen="True" AutoGenerateColumns="False"
                  SelectionMode="Single" ItemsSource="{Binding Accounts}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Account Number" Binding="{Binding AccountNumber}"/>
                <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Balance" Binding="{Binding Balance}"/>
                <DataGridTextColumn Header="Type" Binding="{Binding Type}"/>
                <DataGridTextColumn Header="Email" Binding="{Binding Email}"/>
                <DataGridTextColumn Header="Phone Number" Binding="{Binding PhoneNumber}"/>
                <DataGridTextColumn Header="Address" Binding="{Binding Address}"/>
                <DataGridTextColumn Header="IsActive" Binding="{Binding IsActive}"/>
                <DataGridTextColumn Header="Interest Percentage" Binding="{Binding InterestPercentage}"/>
                <DataGridTextColumn Header="Transaction Count" Binding="{Binding TransactionCount}"/>
                <DataGridTextColumn Header="Last Transaction Date" Binding="{Binding LastTransactionDate}"/>


            </DataGrid.Columns>
        </DataGrid>
        <Button Grid.Row="1" Content="Update Account" Width="200" Height="30"
                Margin="0,7,0,3" HorizontalAlignment="Right"
                Background="DimGray" Foreground="Beige" FontWeight="bold"
                Click="Button_Click_1"/>


    </Grid>
</Window>


AccountListWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using BankManagementSystem.Pages;

namespace BankManagementSystem
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.newAccountWindow.Show();
            NewAccountWindow newAccountWindow = (NewAccountWindow)FormConfig.newAccountWindow;
            FormConfig.accountViewModel.NewWindowClose = newAccountWindow.WindowClose;
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (grdAccounts.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select account to edit",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
                    FormConfig.editAccountWindow.Show();

                    EditAccountWindow editAccountWindow = (EditAccountWindow)FormConfig.editAccountWindow;
                    FormConfig.accountViewModel.EditWindowClose = editAccountWindow.WindowClose;

                }
            }
        }

NewAccountWindow.xaml
----------------------
<Window x:Class="BankManagementSystem.Pages.NewAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels"
        mc:Ignorable="d"
        Title="NewAccountWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200" Margin="0 10 0 0">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" TextAlignment="center" Text="New Account"
                   FontSize="22" FontWeight="Bold" Background="Cyan"/>
        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0 10 0 0">
            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Account Number"/>
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding NewAccount.AccountNumber}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Name"/>
                <TextBox  Width="300" Background="FloralWhite"  Margin="100 0 0 0" Text="{Binding NewAccount.Name}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Balance" />
                <TextBox  Width="300" Background="FloralWhite"  Margin="100 0 0 0" Text="{Binding NewAccount.Balance}" />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Type"/>
                <RadioButton Content="current"  Margin="100 0 0 0" />
                <RadioButton Content="savings"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Email"/>
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding NewAccount.Email}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Phone"/>
                <TextBox  Width="300" Background="FloralWhite"  Margin="100 0 0 0" Text="{Binding NewAccount.PhoneNumber}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Address"/>
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding NewAccount.Address}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="IsActive"/>
                <CheckBox Content="" Margin="100 0 0 0"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Interest Percentage"/>
                <ComboBox Margin="100 0 0 0">
                    <ComboBoxItem Content="5%"/>
                    <ComboBoxItem Content="10%"/>
                    <ComboBoxItem Content="15%"/>
                </ComboBox>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Transaction Count"/>
                <TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding NewAccount.TransactionCount}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Last Transaction Date"/>
                <TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding NewAccount.LastTransactionDate}"/>
            </StackPanel>
        </StackPanel>

        <Button HorizontalAlignment="Left" Grid.Row="2" Width="200" Background="DimGray" Content="Save" Foreground="White" FontWeight="bold"
                Height="50"
                Margin="261,15,0,15"
                Command="{Binding CreateCommand}"/>

    </Grid>
</Window>



NewAccountWindow.xaml.cs
-----------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for NewAccountWindow.xaml
    /// </summary>
    public partial class NewAccountWindow : Window
    {
        public NewAccountWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }
        public void WindowClose()
            {
            this.Hide();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

EditAccountWindow.xaml
-------------------------
<Window x:Class="BankManagementSystem.Pages.EditAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="EditAccountWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200" Margin="0 10 0 0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="429*"/>
            <ColumnDefinition Width="371*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
            <RowDefinition Height="auto" MinHeight="60.04"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" TextAlignment="center"  Text="Edit Account" Margin="1,-12,-1,333" Grid.RowSpan="2" Grid.ColumnSpan="2" FontSize="18" FontWeight="Bold"/>
        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0,20,0,10" Grid.ColumnSpan="2">
            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Account Number"/>
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding SelectedAccount.AccountNumber}" IsEnabled="False"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Name"/>
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding SelectedAccount.Name}" IsEnabled="False"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Balance" />
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding SelectedAccount.Balance}" IsEnabled="False"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Type"/>
                <RadioButton Content="current" Margin="100 0 0 0"/>
                <RadioButton Content="savings"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Email"/>
                <TextBox  Width="300" Background="FloralWhite"  Margin="100 0 0 0" Text="{Binding SelectedAccount.Email}" IsEnabled="False"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Phone"/>
                <TextBox  Width="300" Background="FloralWhite" Margin="100 0 0 0" Text="{Binding SelectedAccount.Phone}" IsEnabled="False"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Address"/>
                <TextBox  Width="300" Background="FloralWhite"  Margin="100 0 0 0" Text="{Binding SelectedAccount.Address}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="IsActive"/>
                <CheckBox Content="" Margin="100 0 0 0"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Interest Percentage"/>
                <ComboBox Margin="100 0 0 0">
                    <ComboBoxItem Content="5%"/>
                    <ComboBoxItem Content="10%"/>
                    <ComboBoxItem Content="15%"/>
                </ComboBox>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Transaction Count"/>
                <TextBox Width="300" IsEnabled="False" Margin="100 0 0 0"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Last Transaction Date"/>
                <TextBox Width="300" IsEnabled="False" Margin="100 0 0 0"/>
            </StackPanel>
        </StackPanel>

        <Button HorizontalAlignment="Right" Grid.Row="2" Width="200" Background="DimGray" Content="Save" Foreground="White" FontWeight="bold"
        Margin="0,24,340,6" Command="{Binding UpdateCommand}" Grid.ColumnSpan="2"/>

    </Grid>
</Window>

EditAccountWindow.xaml.cs
----------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for EditAccountWindow.xaml
    /// </summary>
    public partial class EditAccountWindow : Window
    {
        public EditAccountWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }
        public void WindowClose()
        {
            this.Hide();    
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

AccountMemoryRepo.cs
----------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Models;
using BankManagementSystem.Repos;

namespace BankManagementSystem.Databases
{
    public class AccountMemoryRepo : IAccountRepo
    {
        public ObservableCollection<Account> accounts = new ObservableCollection<Account>()
        {
            new Account
            {
                AccountNumber = 3132324,
                Name = "Sharon",
                Balance = 0,
                Type = "savings",
                Email = "gladsy@gmail.com",
                PhoneNumber = "5236526678",
                Address = "gdsagdhsgdhsg",
                IsActive = true,
                InterestPercentage = 0,
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            },
            new Account
            {
                AccountNumber = 3132324,
                Name = "Susu",
                Balance = 0,
                Type = "current",
                Email = "ggg@gmail.com",
                PhoneNumber = "5236526526",
                Address = "gdsagdhsgdhsg",
                IsActive = true,
                InterestPercentage = 0,
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            }
        };

        public void Create(Account account)
        {
            accounts.Add(account);
        }

        public void UpdateAccount(Account account)
        {
             foreach(var ac in accounts)
            {
                if (ac.AccountNumber == account.AccountNumber)
                {
                    ac.Address = account.Address;
                }
            }
        }

        public ObservableCollection<Account> ReadAllAccount()
        {
            return accounts;
        }

        public void DeleteAccount(int acNo, Account account)
        {
            throw new NotImplementedException();
        }

        public void Deposit(int acNo, int Amount)
        {
            throw new NotImplementedException();
        }

        public void Withdrw(int acNo, int Amount)
        {
            throw new NotImplementedException();
        }

        public void CalculateInterestAndUpdateBalance()
        {
            throw new NotImplementedException();
        }
    }
}


IAccountRepo.cs
-------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Models;

namespace BankManagementSystem.Repos
{
    public interface IAccountRepo
    {
        void Create(Account account);
        void UpdateAccount( Account account);

        void DeleteAccount(int accountNumber, Account account);
        void Deposit(int accountNumber, int Amount);
        void Withdrw(int accountNumber, int Amount);
        void CalculateInterestAndUpdateBalance();
        ObservableCollection<Account> ReadAllAccount();

    }
}

AccountViewModel.cs
-----------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using BankManagementSystem.Commands;
using BankManagementSystem.Databases;
using BankManagementSystem.Models;
using BankManagementSystem.Repos;

namespace BankManagementSystem.ViewModels
{
    public delegate void DWindowClose();
    public class AccountViewModel : ViewModelBase
    {

        private Account _newAccount = null;
        public DWindowClose NewWindowClose;
        public DWindowClose EditWindowClose;


        public Account NewAccount
        {
            get { return _newAccount; }
            set
            {
                _newAccount = value;
                onPropertyChanged(nameof(NewAccount));
            }
        }
        private Account _selectedAccount = null;
        public Account SelectedAccount
        {

            get => _selectedAccount;
            set
            {
                _selectedAccount = value;
                onPropertyChanged(nameof(SelectedAccount));
            }
        }



        private IAccountRepo _repo = new AccountMemoryRepo();
        public ObservableCollection<Account> Accounts
        {
            get
            {
                return _repo.ReadAllAccount();
            }
        }

        public ICommand CreateCommand { get; }
        public ICommand UpdateCommand { get; }

        public AccountViewModel()
        {
            this.NewAccount = new Account
            {
                AccountNumber = 00000,
                Name = "",
                Balance = 0,
                Type = "savings",
                Email = "minnu@gmail.com",
                PhoneNumber = "5236526526",
                Address = "gdsagdhsgdhsg",
                IsActive = true,
                InterestPercentage = 0,
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            };
            CreateCommand = new RelayCommand(Create);
            UpdateCommand = new RelayCommand(Update);

        }

        public void Create()
        {
            Account newAccount = new Account
            {
                AccountNumber = NewAccount.AccountNumber,
                Name = NewAccount.Name,
                Balance = NewAccount.Balance,
                Type = NewAccount.Type,
                Email = NewAccount.Email,
                PhoneNumber = NewAccount.PhoneNumber,
                Address = NewAccount.Address,
                IsActive = NewAccount.IsActive,
                InterestPercentage = NewAccount.InterestPercentage,
                TransactionCount = NewAccount.TransactionCount,
                LastTransactionDate = NewAccount.LastTransactionDate,
            };
            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            _repo.Create(newAccount);
            this.NewAccount = new Account
            { AccountNumber = 0, Name = "", Balance = 0, Type = "", Email = "", PhoneNumber = "", Address = "", IsActive = false, InterestPercentage = 0, TransactionCount = 0, LastTransactionDate = DateTime.Now };
            //this.NewItenary.Id = 0;
            //..
            //this.NewItenary = NewItenary;
            result = MessageBox.Show(messageBoxText: "Created Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
             
            if (NewWindowClose != null)
            {
                NewWindowClose();
            }

        }
         public void Update()
        {
            if (this.SelectedAccount == null)
            {
                return;
            }
            _repo.UpdateAccount(this.SelectedAccount);
            this.SelectedAccount = this.SelectedAccount;

            //{ AccountNumber = 0, Name = "", Balance = 0, Type = "", Email = "", PhoneNumber = "", Address = "", IsActive = false, InterestPercentage = 0, TransactionCount = 0, LastTransactionDate = DateTime.Now };
            //this.NewItenary.Id = 0;
            //..
            //this.NewItenary = NewItenary;
            var result = MessageBox.Show(messageBoxText: "Updated Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);

            if (EditWindowClose != null)
            {
                EditWindowClose();
            }
        }
    }
}

ViewModelBase.cs
---------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementSystem.ViewModels
{
    public class ViewModelBase : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public void onPropertyChanged(string propertyName)
        {
            if(PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}

FormConfig.cs
----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Pages;
using BankManagementSystem.ViewModels;

namespace BankManagementSystem
{
    public static class FormConfig
    {
        public static NewAccountWindow newAccountWindow = null;
        public static EditAccountWindow editAccountWindow = null;
        public static AccountViewModel accountViewModel = null;
        static FormConfig()
        {
            accountViewModel = new AccountViewModel();
            newAccountWindow = new NewAccountWindow();
            editAccountWindow = new EditAccountWindow();
           
        }

    }
}

Account.cs
-----------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementSystem.Models
{
    public class Account
    {
        public int AccountNumber { get; set; }
        public string Name { get; set; }
        public Decimal Balance { get; set; }
        public string Type { get; set; }
        public String Email { get; set; }
        public String PhoneNumber { get; set; }
        public String Address { get; set; }
        public bool IsActive{ get; set; }
        public int InterestPercentage  { get; set; }
        public int TransactionCount { get; set; }
        public DateTime LastTransactionDate { get; set; }

    }
}

RelayCommand.cs
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace BankManagementSystem.Commands
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }
        //

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
        //
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }
    }
}
